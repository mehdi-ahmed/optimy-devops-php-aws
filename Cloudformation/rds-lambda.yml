AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # Step 1: RDS MySQL Database
  MySQLDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  MySQLDBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Security Group for RDS instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: '0.0.0.0/0' # Open to all => Just for testing purposes !! :)
          # SourceSecurityGroupId: !Ref ECSSecurityGroup => TODO => Connect this with my ECS or Update Stack later

  MySQLDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: 'Optimy-DB'
      DBInstanceClass: 'db.t3.micro'
      Engine: 'mysql'
      EngineVersion: '8.0.35'
      MasterUsername: 'admin'
      MasterUserPassword: 'password'
      DBName: 'assignment_db'
      AllocatedStorage: '20' # Minimum storage for RDS MySQL
      BackupRetentionPeriod: 7
      VPCSecurityGroups:
        - !Ref MySQLDBSecurityGroup
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref MySQLDBSubnetGroup

  MySQLDBInit:
    Type: 'Custom::MySQLDBInit'
    Properties:
      ServiceToken: !GetAtt CustomFunction.Arn
      DatabaseName: 'assignment_db'
      UserName: 'admin'
      Password: 'password'
      TableName: 'test'
      TableDefinition: 'id INT AUTO_INCREMENT PRIMARY KEY, message VARCHAR(255), date DATETIME'
      TableData: "('Hello Optimy !! FROM RDS :)))', '2024-05-20 00:00:00')"

  CustomFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import pymysql
          import os
          
          def handler(event, context):
              endpoint = event['ResourceProperties']['DatabaseName']
              username = event['ResourceProperties']['UserName']
              password = event['ResourceProperties']['Password']
              table_name = event['ResourceProperties']['TableName']
              table_definition = event['ResourceProperties']['TableDefinition']
              table_data = event['ResourceProperties']['TableData']
          
              connection = pymysql.connect(
                  host=endpoint,
                  user=username,
                  password=password,
                  database=assignment_db,
                  cursorclass=pymysql.cursors.DictCursor
              )
          
              with connection.cursor() as cursor:
                  cursor.execute(f"CREATE TABLE IF NOT EXISTS {table_name} ({table_definition});")
                  cursor.execute(f"INSERT INTO {table_name} VALUES {table_data};")
          
              connection.commit()
              connection.close()
          
              return {
                  'statusCode': 200,
                  'body': json.dumps('Table created and data inserted successfully')
              }
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 300

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'MySQLDBInitPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'rds:DescribeDBInstances'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeVpcs'
                Resource: '*'

  # Networking Resources
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'OptimyVPC'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'OptimyInternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'PublicRouteTable'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet2'

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: "us-east-1c"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet3'

Outputs:
  RDSInstanceEndpoint:
    Description: 'Endpoint of the RDS instance'
    Value: !GetAtt MySQLDBInstance.Endpoint.Address